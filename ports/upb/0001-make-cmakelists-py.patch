diff --git a/cmake/make_cmakelists.py b/cmake/make_cmakelists.py
index 6e552ba..883794e 100755
--- a/cmake/make_cmakelists.py
+++ b/cmake/make_cmakelists.py
@@ -52,10 +52,12 @@ class BuildFileFunctions(object):
   def _add_deps(self, kwargs, keyword=""):
     if "deps" not in kwargs:
       return
+    deps = StripFirstChar(kwargs["deps"])
+    deps = [d if d != "utf8_range" else "utf8_range::utf8_range" for d in deps]
     self.converter.toplevel += "target_link_libraries(%s%s\n  %s)\n" % (
         kwargs["name"],
         keyword,
-        "\n  ".join(StripFirstChar(kwargs["deps"]))
+        "\n  ".join(deps)
     )
 
   def load(self, *args):
@@ -81,12 +83,16 @@ class BuildFileFunctions(object):
       else:
         found_files.append("../" + file)
 
+    self.converter.install_targets += "\n  %s" % kwargs["name"]
     if list(filter(IsSourceFile, files)):
       # Has sources, make this a normal library.
       self.converter.toplevel += "add_library(%s\n  %s)\n" % (
           kwargs["name"],
           "\n  ".join(found_files)
       )
+      self.converter.toplevel += """set_target_properties(%(name)s PROPERTIES OUTPUT_NAME upb_%(name)s)
+target_include_directories(%(name)s PUBLIC $<INSTALL_INTERFACE:include>)
+""" % kwargs
       self._add_deps(kwargs)
     else:
       # Header-only library, have to do a couple things differently.
@@ -95,8 +101,11 @@ class BuildFileFunctions(object):
       self.converter.toplevel += "add_library(%s INTERFACE)\n" % (
           kwargs["name"]
       )
+      self.converter.toplevel += """target_include_directories(%(name)s INTERFACE $<INSTALL_INTERFACE:include>)
+""" % kwargs
       self._add_deps(kwargs, " INTERFACE")
 
+
   def cc_binary(self, **kwargs):
     pass
 
@@ -287,12 +296,14 @@ class Converter(object):
     self.toplevel = ""
     self.if_lua = ""
     self.utf8_range_commit = ""
+    self.install_targets = ""
 
   def convert(self):
     return self.template % {
         "prelude": converter.prelude,
         "toplevel": converter.toplevel,
         "utf8_range_commit": converter.utf8_range_commit,
+        "install_targets": converter.install_targets,
     }
 
   template = textwrap.dedent("""\
@@ -349,24 +360,8 @@ class Converter(object):
     include_directories(../cmake)
     include_directories(${CMAKE_CURRENT_BINARY_DIR})
 
-    if(NOT TARGET utf8_range)
-      if(EXISTS ../external/utf8_range)
-        # utf8_range is already installed
-        include_directories(../external/utf8_range)
-      else()
-        include(FetchContent)
-        FetchContent_Declare(
-          utf8_range
-          GIT_REPOSITORY "https://github.com/protocolbuffers/utf8_range.git"
-          GIT_TAG "%(utf8_range_commit)s"
-        )
-        FetchContent_GetProperties(utf8_range)
-        if(NOT utf8_range_POPULATED)
-          FetchContent_Populate(utf8_range)
-          include_directories(${utf8_range_SOURCE_DIR})
-        endif()
-      endif()
-    endif()
+    # In vcpkg this is provided by the Protobuf package.
+    find_package(utf8_range CONFIG REQUIRED)
 
     if(APPLE)
       set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -undefined dynamic_lookup -flat_namespace")
@@ -374,10 +369,99 @@ class Converter(object):
       set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--build-id")
     endif()
 
+    if (MSVC)
+      add_compile_options(/wd4146 /wd4703 -D_CRT_SECURE_NO_WARNINGS)
+    endif()
+
+    add_library(descriptor_upb_proto)
+
     enable_testing()
 
     %(toplevel)s
 
+    set(UPB_DESCRIPTOR_PROTO "${VCPKG_UPB_HOST_INCLUDE_DIR}/google/protobuf/descriptor.proto")
+    if (VCPKG_UPB_BUILD_CODEGEN)
+      find_package(absl CONFIG REQUIRED)
+      find_package(Protobuf CONFIG REQUIRED)
+      set(UPB_CODEGEN_TARGETS protoc-gen-upb protoc-gen-upbdefs)
+
+      add_executable(protoc-gen-upbdefs
+        ../upbc/common.h
+        ../upbc/common.cc
+        ../upbc/protoc-gen-upbdefs.cc
+      )
+      target_link_libraries(protoc-gen-upbdefs PRIVATE
+        absl::flat_hash_map
+        absl::strings
+        protobuf::libprotobuf
+        protobuf::libprotoc
+      )
+
+      add_executable(protoc-gen-upb
+        ../upbc/common.h
+        ../upbc/common.cc
+        ../upbc/protoc-gen-upb.cc
+      )
+      target_link_libraries(protoc-gen-upb PRIVATE
+        mini_table
+        port
+        upb
+        absl::flat_hash_map
+        absl::flat_hash_set
+        absl::absl_check
+        absl::absl_log
+        absl::strings
+        protobuf::libprotobuf
+        protobuf::libprotoc
+      )
+
+      set(PROTOC_PROGRAM "\$<TARGET_FILE:protobuf::protoc>")
+      set(PROTOC_GEN_UPB_PROGRAM "\$<TARGET_FILE:protoc-gen-upb>")
+      set(PROTOC_GEN_UPBDEFS_PROGRAM "\$<TARGET_FILE:protoc-gen-upbdefs>")
+    else()
+      find_program(PROTOC_PROGRAM protoc)
+      find_program(PROTOC_GEN_UPB_PROGRAM protoc-gen-upb)
+      find_program(PROTOC_GEN_UPBDEFS_PROGRAM protoc-gen-upbdefs)
+    endif()
+
+    set(UPB_DESCRIPTOR_SOURCES
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upb.h"
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upb.c"
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upbdefs.h"
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upbdefs.c"
+    )
+
+    add_custom_command(
+      OUTPUT ${UPB_DESCRIPTOR_SOURCES}
+      DEPENDS "${UPB_DESCRIPTOR_PROTO}"
+      COMMAND
+        "${PROTOC_PROGRAM}"
+        "-I${VCPKG_UPB_HOST_INCLUDE_DIR}"
+        "--plugin=protoc-gen-upb=${PROTOC_GEN_UPB_PROGRAM}"
+        "--plugin=protoc-gen-upbdefs=${PROTOC_GEN_UPBDEFS_PROGRAM}"
+        "--upb_out=${CMAKE_CURRENT_BINARY_DIR}"
+        "--upbdefs_out=${CMAKE_CURRENT_BINARY_DIR}"
+        "${UPB_DESCRIPTOR_PROTO}"
+    )
+
+    target_sources(descriptor_upb_proto PRIVATE ${UPB_DESCRIPTOR_SOURCES})
+
+    install(
+      DIRECTORY ../upb
+      DESTINATION include
+      FILES_MATCHING
+      PATTERN "*.h"
+      PATTERN "*.hpp"
+      PATTERN "*.inc"
+      PATTERN "*.int.h"
+    )
+    install(TARGETS
+      ${UPB_CODEGEN_TARGETS}
+      descriptor_upb_proto
+      %(install_targets)s
+      EXPORT upb-config
+    )
+    install(EXPORT upb-config NAMESPACE upb:: DESTINATION share/upb)
   """)
 
 data = {}
